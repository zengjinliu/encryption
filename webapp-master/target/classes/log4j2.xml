<?xml version="1.0" encoding="UTF-8" ?>
 <configuration  status="OFF" monitorInterval="600" >
	<!--日志级别：TRACE < DEBUG < INFO < WARN < ERROR < FATAL -->
	<!--如果设置为WARN，则低于WARN的信息都不会输出 -->
	<Properties>
		<!-- 配置日志文件输出目录 -->
		<Property name="LOG_HOME">D:/log/webapp</Property>
		<property name="FILE_NAME">webapp</property>
	</Properties>
	<Appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="Debug" onMatch="ACCEPT" onMismatch="DENY" />
			<!--日志输出的格式 -->
			<!-- 
			 %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
			 %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
			%c : logger的名称(%logger)
			 %t : 输出当前线程名称
			 %p : 日志输出格式
			 %m : 日志内容，即 logger.info("message")
			 %n : 换行符
			 %C : Java类名(%F)
			 %L : 行号
			 %M : 方法名
			 %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
			 hostName : 本地机器名
			 hostAddress : 本地ip地址
			 -->
			<PatternLayout
				pattern="[${FILE_NAME}][%d{yyyy-MM-dd HH:mm:ss}]  %p  %C.%M(%L) - %m%n" />
		</Console>

		<!-- 循环日志文件：日志文件大于阀值的时候，就开始写一个新的日志文件 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 
			fileName : 指定当前日志文件的位置和文件名称 filePattern : 指定当发生Rolling时，文件的转移和重命名规则 SizeBasedTriggeringPolicy 
			: 指定当文件体积大于size指定的值时，触发Rolling DefaultRolloverStrategy : 指定最多保存的文件个数 TimeBasedTriggeringPolicy 
			: 这个配置需要和filePattern结合使用 注意filePattern中配置的文件重命名规则是${FILE_NAME}_%d{yyyy-MM-dd}_%i，最小的时间粒度是dd，即天， 
			TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1天生成一个新文件 -->

		<!--错误信息记录 -->
		<RollingRandomAccessFile name="sysError" fileName="${LOG_HOME}/${FILE_NAME}-ERROR.log" filePattern="${LOG_HOME}/${FILE_NAME}-ERROR_%d{yyyy-MM-dd}_%i.log.gz">
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL" />
				<ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<PatternLayout
				pattern="[${FILE_NAME}][%d{yyyy-MM-dd HH:mm:ss}]  %p  %C.%M(%L) - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="1MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>

		<!--系统级别的错误信息 -->
		<RollingRandomAccessFile name="sysFatal"
			fileName="${LOG_HOME}/${FILE_NAME}-FATAL.log" filePattern="${LOG_HOME}/${FILE_NAME}-FATAL%d{yyyy-MM-dd}_%i.log.gz">
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<PatternLayout
				pattern="[${FILE_NAME}][%d{yyyy-MM-dd HH:mm:ss}]  %p  %C.%M(%L) - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="1MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>

		<!--全部日志信息:DEBUG及以上级别 -->
		<RollingRandomAccessFile name="sysAll" fileName="${LOG_HOME}/${FILE_NAME}-ALL.log" filePattern="${LOG_HOME}/${FILE_NAME}-ALL%d{yyyy-MM-dd}_%i.log.gz">
			<Filters>
				<ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>
			<PatternLayout
				pattern="[${FILE_NAME}][%d{yyyy-MM-dd HH:mm:ss}]  %p  %C.%M(%L) - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
			<DefaultRolloverStrategy max="20" />
		</RollingRandomAccessFile>

		<!--配置异步输出日志   includeLocation 必须为true 日志才会输出类信息-->
		<Async name="async" includeLocation="true">
			<AppenderRef ref="sysAll" />
		</Async>

	</Appenders>
	
	<!--定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<Loggers>
		<!-- 异步输出 -->
		<!-- 全局输出-->

		<Root level="debug" additivity="false">
			<Appender-Ref ref="Console" />
			 
		<!--<AppenderRef ref="async"/>-->
			
		</Root>

		<!-- 
		<logger name="org.apache.shiro" level="debug" additivity="false">
		<Appender-Ref ref="Console" />
		</logger>
		-->

	</Loggers>

</configuration>